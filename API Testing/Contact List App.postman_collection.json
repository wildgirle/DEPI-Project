{
	"info": {
		"_postman_id": "8ae3b05a-728e-49b7-88d7-aac59c3f4899",
		"name": "Contact List App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29284827",
		"_collection_link": "https://www.postman.com/depi-testing/workspace/depi-api-project/collection/37872254-8ae3b05a-728e-49b7-88d7-aac59c3f4899?action=share&source=collection_link&creator=29284827"
	},
	"item": [
		{
			"name": "Contacts",
			"item": [
				{
					"name": "Add Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = pm.response.json();\r",
									"//pm.environment.set(\"contactId\",jsonData._id);\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									" var idData =jsonData._id\r",
									"pm.environment.set(\"contactId\",idData);\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									" var tokenData =jsonData.token\r",
									"pm.environment.set(\"token\",tokenData);\r",
									"\r",
									"pm.expect(jsonData).to.be.an('object'); // Adjust based on your expected response type\r",
									"\r",
									"// Validate structure of the response object\r",
									"const expectedKeys = [\r",
									"    \"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\", \r",
									"    \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \r",
									"    \"postalCode\", \"country\", \"owner\", \"__v\"\r",
									"];\r",
									"\r",
									"expectedKeys.forEach((key) => {\r",
									"    pm.expect(jsonData).to.have.property(key);\r",
									"});\r",
									"\r",
									"// Validate specific values\r",
									"pm.expect(jsonData.firstName).to.equal(\"Mahmoud\");\r",
									"pm.expect(jsonData.lastName).to.equal(\"Wagdy\");\r",
									"pm.expect(jsonData.email).to.equal(\"m.wagdy@fake.com\");\r",
									"// You can add more specific checks as necessary\r",
									"/* Firstname , Lastname , email to Variables */\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"birthdate\": \"1970-01-01\",\n    \"phone\": \"8005555555\",\n    \"street1\": \"1 Main St.\",\n    \"street2\": \"Apartment A\",\n    \"city\": \"Anytown\",\n    \"stateProvince\": \"KS\",\n    \"postalCode\": \"12345\",\n    \"country\": \"USA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts?=",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contact List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Check if the response is an array\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"\r",
									"    // Check the length of the response array\r",
									"    pm.expect(jsonData.length).to.be.greaterThan(0); // Adjust based on your expected response length\r",
									"\r",
									"    // Validate structure of the first object in the array\r",
									"    const expectedKeys = [\r",
									"        \"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\", \r",
									"        \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \r",
									"        \"postalCode\", \"country\", \"owner\", \"__v\"\r",
									"    ];\r",
									"\r",
									"    jsonData.forEach((item) => {\r",
									"        expectedKeys.forEach((key) => {\r",
									"            pm.expect(item).to.have.property(key);\r",
									"        });\r",
									"        \r",
									"        // Validate specific values if needed\r",
									"        // You can add more specific checks as necessary\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/contacts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Check if the response is an object\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"\r",
									"    // Validate structure of the response object\r",
									"    const expectedKeys = [\r",
									"        \"_id\", \"firstName\", \"lastName\", \"birthdate\", \"email\", \r",
									"        \"phone\", \"street1\", \"street2\", \"city\", \"stateProvince\", \r",
									"        \"postalCode\", \"country\", \"owner\", \"__v\"\r",
									"    ];\r",
									"\r",
									"    pm.expect(jsonData).to.have.keys(expectedKeys);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/contacts/{{contactId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const updatedResource = {\r",
									"    \"firstName\": \"Amy\",\r",
									"    \"lastName\": \"Miller\",\r",
									"    \"birthdate\": \"1992-02-02\",\r",
									"    \"email\": \"amiller@fake.com\",\r",
									"    \"phone\": \"8005554242\",\r",
									"    \"street1\": \"13 School St.\",\r",
									"    \"street2\": \"Apt. 5\",\r",
									"    \"city\": \"Washington\",\r",
									"    \"stateProvince\": \"QC\",\r",
									"    \"postalCode\": \"A1A1A1\",\r",
									"    \"country\": \"Canada\"\r",
									"};\r",
									"/* Convert this names to variables */\r",
									"\r",
									"pm.test(\"Response body contains updated resource\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.deep.include(updatedResource);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Amy\",\n    \"lastName\": \"Miller\",\n    \"birthdate\": \"1992-02-02\",\n    \"email\": \"amiller@fake.com\",\n    \"phone\": \"8005554242\",\n    \"street1\": \"13 School St.\",\n    \"street2\": \"Apt. 5\",\n    \"city\": \"Washington\",\n    \"stateProvince\": \"QC\",\n    \"postalCode\": \"A1A1A1\",\n    \"country\": \"Canada\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts/{{contactId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Contact = {\r",
									"  \"firstName\": \"Anna\"\r",
									"};\r",
									"/* Convert this names to variables */\r",
									"\r",
									"pm.test(\"Response body contains updated resource\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.deep.include(Contact);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Anna\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/contacts/{{contactId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						},
						"description": "The PATCH Update Contact operation is not available through the UI."
					},
					"response": []
				},
				{
					"name": "Delete Contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure resource is deleted\", function () {\r",
									"    // يمكنك التحقق من عدم وجود المورد بعد حذفه\r",
									"    pm.sendRequest({\r",
									"        url: '{{baseURL}}/contacts/{{contactId}}', // ضع عنوان المورد المحذوف\r",
									"        method: 'GET'\r",
									"    }, function (err, res) {\r",
									"        pm.test(\"Deleted resource returns 404\", function () {\r",
									"            pm.response.to.have.status(404);\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/contacts/{{contactId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"contacts",
								"{{contactId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"pm.test(\"Status code is 200, 201, or 202\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 204]);\r",
							"});\r",
							""
						]
					}
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Add User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var jsonData = pm.response.json();\r",
									" var tokenData =jsonData.token\r",
									"\r",
									"pm.environment.set(\"token\",tokenData);\r",
									"// Validate structure of the response object\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"});\r",
									"\r",
									"// Validate specific values\r",
									"pm.test(\"Validate user details\", function () {\r",
									"    pm.expect(jsonData.user).to.be.an('object');\r",
									"  pm.expect(jsonData.user.firstName).to.equal(pm.environment.get(\"firstName\"));\r",
									"     pm.expect(jsonData.user.lastName).to.equal(pm.environment.get(\"lastName\"));\r",
									"pm.expect(jsonData.user.email).to.equal(pm.environment.get(\"email\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"/*pm.test(\"Test data type of the response\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									" pm.expect(jsonData.user.firstName).to.equal(\"Mahmoud\");\r",
									"    pm.expect(jsonData.user.lastName).to.equal(\"Wagdy\");\r",
									"    pm.expect(jsonData.user.email).to.equal(\"m.wagdy@1111.com\");\r",
									"});*/"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"mmyypass\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is valid\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"\r",
									"    // Check if the response is an object\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"\r",
									"    // Validate structure of the response object\r",
									"    const expectedKeys = [\r",
									"        \"_id\", \"firstName\", \"lastName\", \"email\", \r",
									"      \"__v\"\r",
									"    ];\r",
									"\r",
									"    pm.expect(jsonData).to.have.keys(expectedKeys);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						},
						"description": "The GET User Profile operation is not available through the UI."
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Contact = {\r",
									"  \"firstName\": \"Meennaa\"\r",
									"};\r",
									"/* Convert this names to variables */\r",
									"\r",
									"pm.test(\"Response body contains updated resource\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.deep.include(Contact);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Meennaa\",\n    \"lastName\": \"Use\",\n    \"email\": \"rofydamarey@fake500.com\",\n    \"password\": \"myNewPassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
							"protocol": "https",
							"host": [
								"thinking-tester-contact-list",
								"herokuapp",
								"com"
							],
							"path": [
								"users",
								"me"
							]
						},
						"description": "The PATCH Update User operation is not available through the UI."
					},
					"response": []
				},
				{
					"name": "Log Out User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Logout User\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.eql(\"\");\r",
									"});\r",
									"\r",
									"// Additional test for checking if the token is invalidated\r",
									"   pm.sendRequest({\r",
									"        url: \"{{baseURL}}/users/logout\", // ضع عنوان المورد المحذوف\r",
									"        method: 'GET'\r",
									"    }, function (err, res) {\r",
									"        pm.test(\"return 401\", function () {\r",
									"            pm.response.to.have.status(401);\r",
									"        });\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log In User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Check if the response is JSON\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Parse the response JSON for further validation\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Check if the response contains a token (assuming the API returns a token on successful login)\r",
									"pm.test(\"Response contains a token\", function () {\r",
									"    pm.expect(responseData).to.have.property(\"token\");\r",
									"});\r",
									"\r",
									"// Optionally, save the token in an environment variable for future requests\r",
									"pm.environment.set(\"authToken\", responseData.token);\r",
									"\r",
									"// Check if the email returned matches the email used for login (optional validation)\r",
									"pm.test(\"Email matches\", function () {\r",
									"    pm.expect(responseData.email).to.eql(pm.environment.get(\"mahmoudwagdy@fake44.com\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"email\": \"mahmoudwagdy@fake44.com\",\n    \"password\": \"myNewPassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/login",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ensure resource is deleted\", function () {\r",
									"    // يمكنك التحقق من عدم وجود المورد بعد حذفه\r",
									"    pm.sendRequest({\r",
									"        url: '{{baseURL}}/users/me', // ضع عنوان المورد المحذوف\r",
									"        method: 'GET'\r",
									"    }, function (err, res) {\r",
									"        pm.test(\"Deleted resource returns 401\", function () {\r",
									"            pm.response.to.have.status(401);\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/users/me",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"me"
							]
						},
						"description": "The DELETE User operation is not available through the UI."
					},
					"response": [
						{
							"name": "Delete User",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://thinking-tester-contact-list.herokuapp.com/users/me",
									"protocol": "https",
									"host": [
										"thinking-tester-contact-list",
										"herokuapp",
										"com"
									],
									"path": [
										"users",
										"me"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		}
	]
}